// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Currency {
  ARS
  USD
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?
  role           String    @default("INQUILINO")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  inquiries      Inquiry[]
  properties     Property[] @relation("UserProperties")

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]

  @@map("categories")
}

model Property {
  id             String    @id @default(cuid())
  title          String
  description    String
  price          Float
  currency       Currency  @default(ARS)
  location       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  creatorId      String?
  creator        User?     @relation("UserProperties", fields: [creatorId], references: [id])
  imageUrl       String?
  otherImageUrls String[]   @default([])
  inquiries      Inquiry[]

  @@map("properties")
}

model Inquiry {
  id          Int      @id @default(autoincrement())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  name        String
  email       String
  phone       String?
  message     String?
  createdAt   DateTime @default(now())

  @@map("inquiries")
}
