generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  emailVerified      DateTime?
  image              String?
  passwordHash       String?
  role               String        @default("INQUILINO")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  cuit               String?       @unique
  dni                String?       @unique
  firstName          String?
  lastName           String?
  agentAppointments  Appointment[] @relation("AppointmentAgent")
  clientAppointments Appointment[] @relation("AppointmentClient")
  contracts          Contract[]    @relation("UserContracts")
  leadAssignments    Lead[]        @relation("LeadAgent")
  accounts           Account[]
  inquiries          Inquiry[]
  properties         Property[]    @relation("UserProperties")
  sessions           Session[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]

  @@map("categories")
}

model Property {
  id             String        @id @default(cuid())
  code           String?       @unique
  title          String
  description    String
  price          Float
  currency       Currency      @default(ARS)
  location       String
  city           String?        // ahora opcional
  address        String?        // ahora opcional
  bedrooms       Int?
  bathrooms      Int?
  garage         Boolean?
  expenses       Float?
  videoUrl       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  categoryId     Int
  creatorId      String?
  imageUrl       String?
  otherImageUrls String[]      @default([])
  appointments   Appointment[] @relation("PropertyAppointments")
  contracts      Contract[]    @relation("PropertyContracts")
  leads          Lead[]        @relation("PropertyLeads")
  inquiries      Inquiry[]
  category       Category      @relation(fields: [categoryId], references: [id])
  creator        User?         @relation("UserProperties", fields: [creatorId], references: [id])

  @@map("properties")
}

model Inquiry {
  id         Int      @id @default(autoincrement())
  propertyId String
  userId     String?
  name       String
  email      String
  phone      String?
  message    String?
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id])

  @@map("inquiries")
}

model Lead {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  dni          String?       @unique
  cuit         String?       @unique
  email        String?
  phone        String?
  source       String?
  status       String        @default("nuevo")
  notes        String?
  propertyId   String?
  agentId      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  agent        User?         @relation("LeadAgent", fields: [agentId], references: [id])
  property     Property?     @relation("PropertyLeads", fields: [propertyId], references: [id], onDelete: Cascade)
}

model Appointment {
  id         String   @id @default(cuid())
  date       DateTime
  propertyId String
  leadId     String?
  clientId   String?
  agentId    String
  status     String   @default("pendiente")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  agent      User     @relation("AppointmentAgent", fields: [agentId], references: [id], onDelete: Cascade)
  client     User?    @relation("AppointmentClient", fields: [clientId], references: [id], onDelete: Cascade)
  lead       Lead?    @relation(fields: [leadId], references: [id], onDelete: Cascade)
  property   Property @relation("PropertyAppointments", fields: [propertyId], references: [id], onDelete: Cascade)
}

model Contract {
  id         String    @id @default(cuid())
  propertyId String
  tenantId   String
  startDate  DateTime
  endDate    DateTime
  rentAmount Float
  terms      String?
  status     String    @default("activo")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  property   Property  @relation("PropertyContracts", fields: [propertyId], references: [id], onDelete: Cascade)
  tenant     User      @relation("UserContracts", fields: [tenantId], references: [id], onDelete: Cascade)
  receipts   Receipt[] @relation("ContractReceipts")
}

model Receipt {
  id         String   @id @default(cuid())
  contractId String
  issueDate  DateTime @default(now())
  amount     Float
  notes      String?
  contract   Contract @relation("ContractReceipts", fields: [contractId], references: [id], onDelete: Cascade)
}

enum Currency {
  ARS
  USD
}
